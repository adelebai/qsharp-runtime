; Copyright (c) Microsoft Corporation. All rights reserved.
; Licensed under the MIT License.

;=======================================================================================================================
; QIR types
;
%Array = type opaque
%Callable = type opaque
%Qubit = type opaque
%Range = type { i64, i64, i64 }
%Result = type opaque
%String = type opaque
%TupleHeader = type { i32 }
%Pauli = type {i2}

;=======================================================================================================================
; Native types
; NB: there is no overloading at IR level, so a call/invoke will be made even
; if the definition of the function mismatches the declaration of the arguments.
; It means we could declare here the bridge's C-functions using QIR types
; and avoid bitcasts. However, it seems prudent to be more explicit about
; what's going on and declare the true signatures, as generated by Clang.
;
%class.QUBIT = type opaque
%class.RESULT = type opaque
%struct.QirArray = type opaque
%struct.QirCallable = type opaque
%struct.QirRange = type { i64, i64, i64 }
%struct.QirString = type opaque
%struct.QirTupleHeader = type { i32 }

;===============================================================================
; declarations of the native methods this bridge delegates to
;

declare void @quantum__qis__z(%class.QUBIT*)

declare void @quantum__qis__crx(%struct.QirArray*, double, %class.QUBIT*)
declare void @quantum__qis__crz(%struct.QirArray*, double, %class.QUBIT*)

;===============================================================================
; quantum__trc namespace implementations
;
define double @__quantum__qis__intAsDouble(i64 %i)
{
  %d = call double @quantum__qis__intAsDouble(i64 %i)
  ret double %d
}

define void @__quantum__qis__cnot__(%Qubit* %.qc, %Qubit* %.qt) {
  %qc = bitcast %Qubit* %.qc to %class.QUBIT*
  %qt = bitcast %Qubit* %.qt to %class.QUBIT*
  call void @quantum__qis__cnot(%class.QUBIT* %qc, %class.QUBIT* %qt)
  ret void
}

define void @__quantum__qis__h__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__h(%class.QUBIT* %q)
  ret void
}

define %Result* @__quantum__qis__measure(%Array* %.paulis, %Array* %.qubits) {
  %paulis = bitcast %Array* %.paulis to %struct.QirArray*
  %qubits = bitcast %Array* %.qubits to %struct.QirArray*
  %r = call %class.RESULT* @quantum__qis__measure(%struct.QirArray* %paulis, %struct.QirArray* %qubits)
  %.r = bitcast %class.RESULT* %r to %Result*
  ret %Result* %.r
}

define %Result* @__quantum__qis__mz(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %r = call %class.RESULT* @quantum__qis__mz(%class.QUBIT* %q)
  %.r = bitcast %class.RESULT* %r to %Result*
  ret %Result* %.r
}

define void @__quantum__qis__s__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__s(%class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__t__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__t(%class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__rx__(double %.theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__rx(double %.theta, %class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__ry__(double %.theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__ry(double %.theta, %class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__rz__(double %.theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__rz(double %.theta, %class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__x__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__x(%class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__y__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__y(%class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__z__(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__z(%class.QUBIT* %q)
  ret void
}


define void @__quantum__qis__crx__(%Array* %.ctls, double %.theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %ctls = bitcast %Array* %.ctls to %struct.QirArray*
  call void @quantum__qis__crx(%struct.QirArray* %ctls, double %.theta, %class.QUBIT* %q)
  ret void
}

define void @__quantum__qis__crz__(%Array* %.ctls, double %.theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %ctls = bitcast %Array* %.ctls to %struct.QirArray*
  call void @quantum__qis__crz(%struct.QirArray* %ctls, double %.theta, %class.QUBIT* %q)
  ret void
}
